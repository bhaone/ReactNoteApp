{"version":3,"sources":["pages/createnote.js","context/notesContext.js","layouts/header.js","pages/note.js","pages/notes.js","App.js","reportWebVitals.js","index.js"],"names":["noteReducer","state","action","type","inputName","inputValue","title","description","initialState","CreateNote","props","useReducer","dispatch","handleChange","e","target","name","value","onClose","getNotes","sessionStorage","getItem","JSON","parse","setNotes","notes","push","addedOn","Date","now","setItem","stringify","Fragment","noValidate","autoComplete","Grid","item","xs","FormControl","fullWidth","TextField","id","label","variant","onChange","multiline","rows","Button","color","startIcon","onClick","NotesContext","createContext","NotesProvider","useState","useEffect","Provider","updateNotes","children","Header","openModal","setOpenModal","useContext","handleClose","AppBar","position","Toolbar","Typography","aria-label","style","Modal","open","aria-labelledby","aria-describedby","className","Note","Card","deleteNote","CardHeader","data","subheader","toLocaleString","CardContent","component","Notes","container","direction","map","note","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f804a814.chunk.js","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { FormControl, Grid, Button } from \"@material-ui/core\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\n\r\nconst noteReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"input\": {\r\n      return {\r\n        ...state,\r\n        [action.inputName]: action.inputValue,\r\n      };\r\n    }\r\n    case \"save\": {\r\n      return {\r\n        ...state,\r\n        title: \"\",\r\n        description: \"\",\r\n      };\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n  return state;\r\n};\r\n\r\nconst initialState = {\r\n  title: \"\",\r\n  description: \"\",\r\n};\r\n\r\nconst CreateNote = (props) => {\r\n  const [state, dispatch] = useReducer(noteReducer, initialState);\r\n\r\n  const handleChange = (e) => {\r\n    dispatch({\r\n      type: \"input\",\r\n      inputName: e.target.name,\r\n      inputValue: e.target.value,\r\n    });\r\n  };\r\n\r\n  const handleSave = () => {\r\n    let notes = getNotes();\r\n    setNotes(notes);\r\n    dispatch({ type: \"save\" });\r\n    onClose();\r\n  };\r\n\r\n  const onClose = () => {\r\n    props.onClose();\r\n  };\r\n\r\n  const getNotes = () => {\r\n    let notes;\r\n    if (sessionStorage.getItem(\"notes\") != null) {\r\n      notes = JSON.parse(sessionStorage.getItem(\"notes\"));\r\n    } else {\r\n      notes = [];\r\n    }\r\n    return notes;\r\n  };\r\n\r\n  const setNotes = (notes) => {\r\n    notes.push({\r\n      title: state.title,\r\n      description: state.description,\r\n      addedOn: Date.now(),\r\n    });\r\n    sessionStorage.setItem(\"notes\", JSON.stringify(notes));\r\n  };\r\n\r\n  const { title, description } = state;\r\n  return (\r\n    <React.Fragment>\r\n      <form noValidate autoComplete=\"off\">\r\n        <Grid>\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                id=\"txtNoteTitle\"\r\n                name=\"title\"\r\n                value={title}\r\n                label=\"Title\"\r\n                variant=\"filled\"\r\n                onChange={handleChange}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <br />\r\n          <Grid item xs={12}>\r\n            <FormControl fullWidth>\r\n              <TextField\r\n                id=\"txtNoteDescription\"\r\n                name=\"description\"\r\n                value={description}\r\n                label=\"Discription\"\r\n                variant=\"filled\"\r\n                multiline\r\n                rows={3}\r\n                onChange={handleChange}\r\n              />\r\n            </FormControl>\r\n          </Grid>\r\n          <br />\r\n          <Grid item xs={12}>\r\n            <FormControl>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n                startIcon={<SaveIcon />}\r\n                onClick={handleSave}\r\n              >\r\n                Save\r\n              </Button>\r\n            </FormControl>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default CreateNote;\r\n","import React, { useState, useEffect, createContext } from \"react\";\r\n\r\nexport const NotesContext = createContext();\r\n\r\nexport const NotesProvider = (props) => {\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  const getNotes = () => {\r\n    let notesArry;\r\n    if (sessionStorage.getItem(\"notes\") != null) {\r\n      notesArry = JSON.parse(sessionStorage.getItem(\"notes\"));\r\n    } else {\r\n      notesArry = [];\r\n    }\r\n    return notesArry;\r\n  };\r\n\r\n  useEffect(() => {\r\n    setNotes(getNotes());\r\n  }, []);\r\n\r\n  function updateNotes() {\r\n    setNotes(getNotes());\r\n  }\r\n\r\n  return (\r\n    <NotesContext.Provider value={{ notes, setNotes, updateNotes }}>\r\n      {props.children}\r\n    </NotesContext.Provider>\r\n  );\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { AppBar, Toolbar, Typography, Button, Modal } from \"@material-ui/core\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport CreateNote from \"./../pages/createnote\";\r\nimport { NotesContext } from \"../context/notesContext\";\r\n\r\nconst Header = (props) => {\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const { updateNotes } = useContext(NotesContext);\r\n\r\n  const handleOpenModal = () => {\r\n    setOpenModal(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    updateNotes();\r\n    setOpenModal(false);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" color=\"primary\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">Notes</Typography>\r\n          <Button\r\n            aria-label=\"delete\"\r\n            style={{ color: \"#fff\" }}\r\n            onClick={handleOpenModal}\r\n          >\r\n            <AddIcon />\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Modal\r\n        open={openModal ? openModal : false}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        className=\"modal\"\r\n      >\r\n        <div className=\"node-add-modal\">\r\n          <CreateNote onClose={handleClose}></CreateNote>\r\n        </div>\r\n      </Modal>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardContent, Typography } from \"@material-ui/core\";\r\n\r\nconst Note = (props) => {\r\n  return (\r\n    <Card key={props.data.addedOn} xs={4} className=\"card\">\r\n      <span className=\"close\" onClick={props.deleteNote}></span>\r\n      <CardHeader\r\n        title={props.data.title}\r\n        subheader={new Date(props.data.addedOn).toLocaleString()}\r\n      ></CardHeader>\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {props.data.description}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React, { useContext } from \"react\";\r\nimport Note from \"./note\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { NotesContext } from \"../context/notesContext\";\r\n\r\nconst Notes = () => {\r\n  const { notes } = useContext(NotesContext);\r\n\r\n  return (\r\n    <Grid container direction=\"row\" className=\"card-container\">\r\n      {notes.map((note) => {\r\n        return <Note key={note.addedOn} data={note} />;\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./layouts/header\";\r\nimport Notes from \"./pages/notes\";\r\nimport { NotesProvider } from \"./context/notesContext\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <NotesProvider>\r\n        <Header />\r\n        <Notes />\r\n      </NotesProvider>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}